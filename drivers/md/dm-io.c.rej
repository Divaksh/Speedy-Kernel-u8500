--- drivers/md/dm-io.c
+++ drivers/md/dm-io.c
@@ -287,8 +278,6 @@
 	unsigned offset;
 	unsigned num_bvecs;
 	sector_t remaining = where->count;
-	struct request_queue *q = bdev_get_queue(where->bdev);
-	sector_t discard_sectors;
 
 	/*
 	 * where->count may be zero if rw holds a flush and we need to
@@ -298,12 +287,9 @@
 		/*
 		 * Allocate a suitably sized-bio.
 		 */
-		if (rw & REQ_DISCARD)
-			num_bvecs = 1;
-		else
-			num_bvecs = min_t(int, bio_get_nr_vecs(where->bdev),
-					  dm_sector_div_up(remaining, (PAGE_SIZE >> SECTOR_SHIFT)));
-
+		num_bvecs = dm_sector_div_up(remaining,
+					     (PAGE_SIZE >> SECTOR_SHIFT));
+		num_bvecs = min_t(int, bio_get_nr_vecs(where->bdev), num_bvecs);
 		bio = bio_alloc_bioset(GFP_NOIO, num_bvecs, io->client->bios);
 		bio->bi_sector = where->sector + (where->count - remaining);
 		bio->bi_bdev = where->bdev;
@@ -311,14 +297,10 @@
 		bio->bi_destructor = dm_bio_destructor;
 		store_io_and_region_in_bio(bio, io, region);
 
-		if (rw & REQ_DISCARD) {
-			discard_sectors = min_t(sector_t, q->limits.max_discard_sectors, remaining);
-			bio->bi_size = discard_sectors << SECTOR_SHIFT;
-			remaining -= discard_sectors;
-		} else while (remaining) {
-			/*
-			 * Try and add as many pages as possible.
-			 */
+		/*
+		 * Try and add as many pages as possible.
+		 */
+		while (remaining) {
 			dp->get_page(dp, &page, &len, &offset);
 			len = min(len, to_bytes(remaining));
 			if (!bio_add_page(bio, page, len, offset))
